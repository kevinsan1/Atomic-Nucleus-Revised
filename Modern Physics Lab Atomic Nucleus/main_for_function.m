clear all;clc;close all;
myPath = ['/Users/kevin/SkyDrive/KTH Work/Period'...
    ' 3 2014/SH2008/Atomic Nucleus Revised/Modern'...
    ' Physics Lab Atomic Nucleus/'];
addpath(genpath(myPath));
cd(myPath);
%% Plastic parameters
densityPlastic = 1.13; % g/cm^3
thickness = 0.0001; % thickness in meters
expDataPlastic = load('plasticData.mat');
%% function for plastic
functionForPlastic(thickness,densityPlastic,expDataPlastic);
%% Aluminum parameters
densityAluminum = 2.70; % g/cm^3
thicknessAluminum = 0.000054; % thickness in meters
expDataAluminum=load('aluminumData.mat');
%% function for aluminum
functionForPlastic(thicknessAluminum,densityAluminum,expDataAluminum);
%% * Graph the data, with error bars, and fitting function.
% Bring figure 1 window forward
figure('Units', 'pixels', ...
    'Position', [100 100 500 375]);
dR.plastic = range.plasticgcm2.*dy.plasRange;
dR.aluminum = range.alumgcm2.*dy.alumRange;
plotOf.OurErrorBarsPlastic = errorbar(energy.plasMeV,...
    range.plasticgcm2,dR.plastic,'o'...
    ,'color','k');  % Graph data with error bars
hold on;                  % Freeze the plot to add the fit
plotOf.OurFitPlastic = plot(energy.plasMeV,exp(yy.plasTwo),'-'...
    ,'color','k');
plotOf.OurErrorBarsAluminum = errorbar(energy.alumMeV,...
    range.alumgcm2,dR.aluminum,'o');  % Graph data with error bars
plotOf.OurFitAluminum = plot(energy.alumMeV,exp(yy.two),'-');
% Plot the fit on same graph as data
hXLabel =  xlabel('Energy [MeV]'); hYLabel = ylabel('R(E) [g/cm^{2}]');
hTitle = title(['\chi^2 = ',num2str(chisqr.plasTwo),'  N-M = ',...
    num2str(n.plastic-m.plastic)]);
fprintf('  y(x) = %g + %g x \n',a_fit.two(1),B.aluminum);
% otherSources(plotOf.OurErrorBarsAluminum,plotOf.OurFitPlastic,plotOf.OurErrorBarsPlastic,plotOf.OurFitAluminum,0,k.aluminum,B.aluminum,k.plastic,B.plastic);
[kinetic,csda] = importNISTdataNow('edatacsda_Range.txt',6, 86);
nist.Range = 23:30;
plotOf.NIST=plot(kinetic(nist.Range),...
    csda(nist.Range),'color','r');
%% Other Source
nist.energy = kinetic;
source.Other = .412*nist.energy.^(1.265 - ...
    0.0954*log(nist.energy));
plotOf.Other = plot(kinetic(nist.Range)...
    ,source.Other(nist.Range),'m');
%% Plot features
hLegend = legend([plotOf.OurFitAluminum,plotOf.OurFitPlastic,...
    plotOf.NIST,plotOf.Other],...
    sprintf('R(E)=%g E^{%g}\n',k.aluminum,B.aluminum),...
    sprintf('R(E)=%g E^{%g}\n',k.plastic,B.plastic),...
    'NIST','Other');
set( gca                       , ...
    'FontName'   , 'Helvetica' );
set([hTitle, hXLabel], ...
    'FontName'   , 'AvantGarde');
set([ gca]             , ...
    'FontSize'   , 8           );
set([hXLabel, hYLabel,hLegend]  , ...
    'FontSize'   , 10          );
set( hTitle                    , ...
    'FontSize'   , 12          , ...
    'FontWeight' , 'bold'      );
set([plotOf.OurFitAluminum,plotOf.OurFitPlastic,...
    plotOf.NIST,plotOf.Other], ...
    'LineWidth'       , 1.5          );
set([plotOf.OurErrorBarsAluminum,plotOf.OurErrorBarsPlastic], ...
    'LineWidth'       , 1.5          );
set(gca, ...
    'Box'         , 'off'     , ...
    'TickDir'     , 'out'     , ...
    'TickLength'  , [.02 .02] , ...
    'XMinorTick'  , 'on'      , ...
    'YMinorTick'  , 'on'      , ...
    'YGrid'       , 'on'      , ...
    'XColor'      , [.3 .3 .3], ...
    'YColor'      , [.3 .3 .3], ...
    'LineWidth'   , 1         );
hold off;
printTrueFalse=0;
if printTrueFalse == 1
    set(gcf, 'PaperPositionMode', 'auto');
    figurePath = ['/Users/kevin/SkyDrive/KTH Work/Period 3'...
        ' 2014/SH2008/Atomic Nucleus Revised/Figures/'];
    print('-depsc2',[figurePath sprintf('alum_plas_NIST_plot')])
end
%% Print out latest statistics
fprintf('\n')
fprintf('Final Fit Parameters\n')
fprintf('Aluminum:\n');
fprintf(' k = %g +/- %g \n',k.aluminum,k.aluminum*dc.aluminum);
fprintf(' B = %g +/- %g \n',B.aluminum,dB.aluminum);
fprintf(' Chi-squared: %g\n',chisqr.two);
fprintf('         N-M: %g \n',n.aluminum-m.aluminum);
fprintf('Plastic:\n');
fprintf(' k = %g +/- %g \n',k.plastic,k.plastic*dc.plastic);
fprintf(' B = %g +/- %g \n',B.plastic,dB.plastic);
fprintf(' Chi-squared: %g\n',chisqr.plasTwo);
fprintf('         N-M: %g \n',n.plastic-m.plastic);

